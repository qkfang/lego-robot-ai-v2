{
  "Module_Name": "Motor Pair",
  "Module_Description": "The motor_pair module is used to run motors in a synchronized fashion. This mode is optimal for creating drivebases where you'd want a pair of motors to start and stop at the same time.",
  "SubModule_Name": "Motor Pair",
  "SubModule_Description": "The motor_pair module is used to run motors in a synchronized fashion. This mode is optimal for creating drivebases where you'd want a pair of motors to start and stop at the same time.",
  "Function_Name": "move_for_time",
  "Function": {
    "Function_Name": "move_for_time",
    "Function_Signature": "move_for_time(pair: int, duration: int, steering: int, *, velocity: int = 360, stop: int = motor.BRAKE, acceleration: int = 1000, deceleration: int = 1000) -> Awaitable",
    "Function_Description": "Move a Motor Pair at a constant speed for a specific duration.\nWhen awaited returns a status of the movement that corresponds to one of the following constants from the motor module:\nmotor.READY\nmotor.RUNNING\nmotor.STALLED\nmotor.CANCELED\nmotor.ERROR\nmotor.DISCONNECTED",
    "Function_Arguments": [
      {
        "Argument_Name": "pair: int",
        "Argument_Description": "The pair slot of the Motor Pair."
      },
      {
        "Argument_Name": "duration: int",
        "Argument_Description": "The duration in milliseconds"
      },
      {
        "Argument_Name": "steering: int",
        "Argument_Description": "The steering (-100 to 100)"
      },
      {
        "Argument_Name": "velocity: int",
        "Argument_Description": "The velocity in degrees/sec\nValue ranges depends on motor type.\nSmall motor (essential): -660 to 660\nMedium motor: -1110 to 1110\nLarge motor: -1050 to 1050"
      },
      {
        "Argument_Name": "stop: int",
        "Argument_Description": "The behavior of the Motor after it has stopped. Use the constants in the motor  module.\nPossible values are\nmotor.COAST to make the motor coast until a  stop\nmotor.BREAK to brake and continue to brake after  stop\nmotor.HOLD to tell the motor to hold it's  position\nmotor.CONTINUE to tell the motor to keep running at whatever velocity  it's running at until it gets another command\nmotor.SMART_COAST to make the  motor brake until stop and then coast and compensate for inaccuracies in the next  command\nmotor.SMART_BRAKE to make the motor brake and continue to brake after  stop and compensate for inaccuracies in the next command"
      },
      {
        "Argument_Name": "acceleration: int",
        "Argument_Description": "The acceleration (deg/sec²) (1 - 10000)"
      },
      {
        "Argument_Name": "deceleration: int",
        "Argument_Description": "The deceleration (deg/sec²) (1 - 10000)"
      }
    ],
    "Function_Snippet": [
      {
        "Python_Code": "from hub import port\nimport runloop\nimport motor_pair\n\nasync def main():\n    # Pair motors on port A and B \n    motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)\n\n    # Move straight at default velocity for 1 second \n    await motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0)\n\n    # Move straight at a specific velocity for 1 second \n    await motor_pair.move_for_time(motor_pair.PAIR_1, 1000, 0, velocity=280)\n\n    # Move straight at a specific velocity for 10 seconds with a slow deceleration \n    await motor_pair.move_for_time(motor_pair.PAIR_1, 10000, 0, velocity=280, deceleration=10)\n\nrunloop.run(main())"
      }
    ]
  }
}