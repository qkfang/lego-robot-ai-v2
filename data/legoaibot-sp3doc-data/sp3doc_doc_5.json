{
  "doc_id": "doc_5",
  "doc_title": "Sensor Control",
  "doc_text": "### Sensor Control\n\nIn the previous chapters, you tried using variables and random numbers to control the motors and the light. Now you’ll use a sensor value to control a motor.\n\nConnect a motor to port A and a Force Sensor to port B and try the program below.\n\n```\nimport force_sensor\nimport motor\nfrom hub import port\n\n# Store the force of the Force Sensor in a variable.\nforce = force_sensor.force(port.B)\n\n# Print the variable to the Console.\nprint(force)\n\n# Run the motor and use the variable to set the velocity.\nmotor.run(port.A, force)\n```\n\nPress the Force Sensor while the program is running. That didn’t do much, right? Luckily, the example uses the built-in `print()` function to write the `force` variable to the Console, so that you can easily see what went wrong.\n\n#### The Console\n\nSometimes your program doesn’t do what you expect it to do. You can use the `print()` function to _debug_ your program when that happens. The `print()` function writes whatever you pass as the argument to the Console window below the Code Editor, in this case the force of the Force Sensor. Run the program again and notice the value that appears in the Console.\n\nYou’ll see a single number in the console, and unless you were pressing the Force Sensor when you started the program, that number is `0`. Running a motor at 0 degrees per second doesn’t do much, so the problem is that the program only checks the sensor value once at the start of the program. To update the motor velocity based on the force for as long as the program runs, you’ll need to use the `while True` loop again.\n\nThe Console also displays error messages when something goes wrong while running your program. One common error happens when you run a program to control a motor or read a sensor that isn’t connected. Disconnect the Force Sensor and run the same program one last time. You’ll see an error in the Console informing you that there was a problem, what the problem was, and on what line of code it happened.\n\n#### Fix the Bugs\n\nThe Console helped you find two bugs. Reconnect the Force Sensor to port B to fix the second bug and then run the program below that fixes the first bug by _wrapping_ the code in a `while True` loop.\n\n```\nimport force_sensor\nimport motor\nfrom hub import port\n\nwhile True:\n    # Store the force of the Force Sensor in a variable.\n    force = force_sensor.force(port.B)\n\n    # Print the variable to the Console.\n    print(force)\n\n    # Run the motor and use the variable to set the speed.\n    motor.run(port.A, force)\n```\n\nPress the Force Sensor while the program is running. You’ll see the motor speeding up or slowing down depending on how hard you press the Force Sensor. You’ll also see a lot of variable values written in the Console. The Force Sensor force is measured in decinewtons (dN) and since the maximum force it can measure is 10 newtons, the maximum value in dN is 100. Running a motor at 100 degrees per second still isn’t very fast!\n\n#### Function Return Values\n\nInstead of storing the value of the Force Sensor in a variable, you can also define a function that _returns_ this value. Separating the different parts of your program this way makes it easier to organize your code and fix bugs if they happen.\n\nThe next program defines a `motor_velocity()` function that returns the desired motor velocity based on the force of the Force Sensor instead of using a variable.\n\n```\nimport force_sensor\nimport motor\nfrom hub import port\n\n# This function returns the desired motor velocity.\ndef motor_velocity():\n    # The velocity is five times the force of the Force Sensor.\n    return force_sensor.force(port.B) * 5\n\nwhile True:\n    # Run the motor like before.\n    # Use the `motor_velocity()` function return value for velocity.\n    motor.run(port.A, motor_velocity())\n```\n\nPress the Force Sensor while the program is running. You’ll see the motor speeding up or slowing down depending on how hard you press the Force Sensor. The `motor_velocity()` function multiplies the force value by 5, so the velocity will be between 0 and 500 degrees per second.\n\n#### Challenge\n\nCan you change the code to run the motor at 1000 degrees per second when the Force Sensor is fully pressed?"
}