{
  "doc_id": "doc_6",
  "doc_title": "Sensor Conditions",
  "doc_text": "### Sensor Conditions\n\nYou’ve used the sensor value to control a motor directly, but it’s also possible to change the _flow_ of the program using sensor _conditions_ and an `if`statement. The `if` statement is an essential part of programming and the simplest way to control the flow of your program.\n\nYou create an `if` statement by writing `if` followed by a logical expression and a colon. Logical expressions are basically yes / no questions, such as “Is the color red?” or “Is the button pressed?” If the answer to the question is “yes,” the expression is evaluated to be `True` and otherwise it is `False`. These are the two _Boolean_ values used in Python, and are of type `bool`. All the lines of code with the same indentation level after the `if` statement are part of the code block that runs if the expression is `True`.\n\nFor an example, connect a Color Sensor to port A and run the program below.\n\n```\nfrom hub import port, sound\nimport color\nimport color_sensor\nimport runloop\n\nasync def main():\n    while True:\n # Check if the red color is detected.\n if color_sensor.color(port.A) == color.RED:\n # If red is detected start a very long beep.\n sound.beep(440, 1000000, 100)\n # Pause the program while red is detected.\n while color_sensor.color(port.A) == color.RED:\n     await runloop.sleep_ms(1)\n # Stop the sound when red is no longer detected.\n sound.stop()\n\nrunloop.run(main())\n```\n\nWave a red LEGO® brick in front of the Color Sensor while the program is running. You’ll hear a beep when the red color is detected, which stops when the red color is no longer detected. The example uses an `if` statement to check if the color detected by the Color Sensor is red. It does this using the _equality operator_ `==` with the Color Sensor color value on the left and the `color.RED` constant on the right. (Note that there are two `=` signs vs. the single `=` sign you used to assign values to variables.) If the Color Sensor color value is the same as the `color.RED` constant, the condition is `True` and the code block after the `if` statement runs.\n\nIt’s important to wrap the code in a `while True` loop. Otherwise, the Color Sensor only checks the color for a split second when the program starts. So far, you used the `while` loop with the `True` constant to repeat code forever. You can also use the `while` loop with a logical expression to repeat code only as long as that expression evaluates to `True`. The example above uses the same condition as the `if` statement in the inner `while` loop, to continue playing the beep while the red color is detected. When the condition is no longer `True`, the Hub _exits_ the `while` loop and runs the next line of code to stop the sound.\n\nInside the inner `while` loop, notice the `sleep_ms()` function from the `runloop` module. This function pauses the `main()` coroutine for a number of milliseconds in a _non-blocking_ way. Because it uses the `await` keyword, other tasks can run while that coroutine is paused. In the example, the pause is one millisecond. This may seem like very little time, but it’s enough for the Hub to run many coroutines concurrently. The `sleep_ms()` function from the `time` module, which you used in earlier chapters, pauses the program in a _blocking_ way. This means that it pauses the entire program and not just the code block where you call it.\n\n#### What Else?\n\nYou can add more than one condition by extending the `if` statement with an `elif` statement that checks another condition. You can add as many of these as you need, and they follow the same syntax as the `if` statement. The `elif` should be on the same indentation level as the first `if` statement, and the `elif` keyword is followed by a logical expression and a colon. Indent the next line(s) of code that should run when this condition is `True`.\n\nSometimes, none of the conditions in the `if` and `elif` statements are `True`. In this case, you can run some code by adding an `else` statement without any condition. This runs when all the previous conditions are `False`.\n\nFor example, the program below adds an `elif` and `else` statement to also beep if the left button is pressed.\n\n```\nfrom hub import button, port, sound\nimport color\nimport color_sensor\nimport runloop\n\n# This function returns `True` if the Color Sensor detects red.\ndef red_detected():\n    return color_sensor.color(port.A) == color.RED\n\n# This function returns `True` if the left button is pressed.\ndef left_pressed():\n    return button.pressed(button.LEFT) > 0\n\nasync def main():\n    while True:\n if red_detected():\n # If red is detected start a very long beep.\n sound.beep(440, 1000000, 100)\n # Wait until red is no longer detected.\n while red_detected():\n     await runloop.sleep_ms(1)\n elif left_pressed():\n # If the left button is pressed make a short beep.\n sound.beep(880, 200, 100)\n # Wait until the left button is released.\n while left_pressed():\n     await runloop.sleep_ms(1)\n else:\n # Otherwise, stop the sound.\n sound.stop()\n\nrunloop.run(main())\n```\n\nWave a red LEGO brick in front of the Color Sensor and press the left button on the Hub while the program is running. You’ll hear a beep for as long as the red color is detected, and a short beep each time the left button is pressed.\n\nThe example defines two functions to do the logic tests and return the result. The `red_detected()` function checks if the color detected by the Color Sensor is red and returns the result `True` or `False`. The `left_pressed()` function uses the `pressed()` function from the `hub.button` module and uses the `>` operator to check if the value is _greater than_ `0` and returns the result.\n\nThe code in the `if` statement here is largely the same as the first example, but now it uses the `red_detected()` function in two places instead of repeating the condition for the `if` and `while` statements. The `elif` statement uses the `left_pressed()` function to check if the left button on the Hub is pressed for more than `0` milliseconds.\n\nNote that the `elif` statement only runs when the condition of the first `if` statement is `False`. Therefore, pressing the button while the Color Sensor detects something red has no effect. You should carefully consider the order of your `if` and `elif` conditions and check the most important ones first. The `else` statement stops the sound if neither condition is `True`.\n\n#### Multiple Conditions\n\nWhen you use `if`/`elif`/`else` statements to test for multiple conditions, only one of the blocks will run. These conditions are _mutually exclusive_. You’ve seen that while the color red was detected, pressing the left button had no effect. To truly check multiple conditions, you must check them at the same time. Like adding several stacks of Word Blocks, in Python you can run multiple coroutines with the `run()` function from the `runloop` module. Until now, you’ve called it with the `main()` coroutine as its only argument, but it’s possible to pass multiple coroutines as comma-separated arguments.\n\nFor example, the program below divides the code that checks the detected color and the pressed button into two coroutines. The `run()` function on the final line of code starts both coroutines at the same time.\n\n```\nfrom hub import button, port, sound\nimport color\nimport color_sensor\nimport runloop\n\n# This function returns `True` if the Color Sensor detects red.\ndef red_detected():\n    return color_sensor.color(port.A) == color.RED\n\n# This function returns `True` if the left button is pressed.\ndef left_pressed():\n    return button.pressed(button.LEFT) > 0\n\n# This coroutine continuously checks if the Color Sensor detects red.\nasync def check_color():\n    while True:\n # Wait until red is detected.\n while not red_detected():\n await runloop.sleep_ms(1)\n # When it's detected start a very long beep.\n sound.beep(440, 1000000, 100)\n # Wait until red is no longer detected.\n while red_detected():\n await runloop.sleep_ms(1)\n # When red is no longer detected stop the sound.\n sound.stop()\n\n# This coroutine continuously checks if the left button is pressed.\nasync def check_button():\n    while True:\n # Wait until the left button is pressed.\n while not left_pressed():\n await runloop.sleep_ms(1)\n # When it's pressed make a short beep.\n sound.beep(880, 200, 100)\n # Wait until the left button is released.\n while left_pressed():\n await runloop.sleep_ms(1)\n\n# Run both coroutines.\nrunloop.run(check_color(), check_button())\n```\n\nWave a red LEGO brick in front of the Color Sensor and press the left button on the Hub while the program is running. Like before, you’ll hear a beep for as long as the red color is detected, and a short beep each time the left button is pressed. This time, it’s possible to press the left button and hear a beep while the red color is detected because both functions run at the same time.\n\nWhen you create your own coroutines, remember that:\n\n*   Your coroutines should at least `await` one command.\n*   When you use a _tight_ `while` loop, use `await runloop.sleep_ms(1)` inside the loop to give other coroutines a chance to start and run.\n\n#### Challenge\n\nCan you change the code to detect a different color than red?"
}