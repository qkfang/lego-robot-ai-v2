{
  "doc_id": "doc_1",
  "doc_title": "Introduction to Python",
  "doc_text": "### Comments in Python\n\nIt’s easier to use code when you know what it should do. You can describe this in everyday language by adding comments. Comments aren’t part of the code that runs on the Hub, so they don’t influence its functionality.\n\nThe `#` character marks the start of a comment. You’d usually place a comment before the code it describes, but you can also place short comments after a code statement.\n\n```\n# This is a comment.\nfrom hub import light_matrix\n# This is another comment.\n```\n\nSometimes part of your program doesn’t behave like you want it to. In such cases, it’s useful to _comment out_ parts of the code by adding the `#` character at the start of the line. These lines then become comments and no longer run as a part of your program. Commenting out parts of a program can help you _debug_ or find and correct the problem. To quickly comment out multiple lines of code, select them and then press `CTRL`+`/` on Windows or `Command`+`/` on Mac. To change multiple comments back to code, select them and press the same key combination.\n\n```\n# The next line is commented out:\n# light_matrix.write('Hello, World!')\n```\n\nYou can also use comments to describe your code before writing the working code. That’s called _pseudocode_ and it can help you describe in everyday language what your program should do. The example below uses comments as pseudocode for a blinking-eyes animation on the Light Matrix.\n\n```\n# Show a happy face with eyes on the Light Matrix.\n# Wait for some time.\n# Show a smile without eyes on the Light Matrix.\n# Wait for a short time.\n# Show the first image again on the Light Matrix.\n```\n\n#### Blinking Eyes Program\n\nThis program will show a face with blinking eyes on the Light Matrix of the Hub. Copy the code below and paste it into the Code Editor. Then run the program. As always, delete any existing code from the Code Editor before pasting the new code.\n\nWhen you run this program, you’ll see that the smiley face blinks after a second. The program calls the `show_image()` function from the `hub.light_matrix` module to show an image on the Light Matrix. The program uses the `sleep_ms()` function from the `time` module to add delays for a number of milliseconds between different images. In the code, each comment describes what the next line of code should do.\n\n```\nimport time\n\nfrom hub import light_matrix\n\n# Show a happy face on the Light Matrix.\nlight_matrix.show_image(light_matrix.IMAGE_HAPPY)\n\n# Wait for one second.\ntime.sleep_ms(1000)\n\n# Show a smile on the Light Matrix.\nlight_matrix.show_image(light_matrix.IMAGE_SMILE)\n\n# Wait for 0.2 seconds.\ntime.sleep_ms(200)\n\n# Show a happy face on the Light Matrix.\nlight_matrix.show_image(light_matrix.IMAGE_HAPPY)\n```\n\n#### “WET” or “DRY”?\n\nAlthough commenting every line of code is tempting, the result is that you’ll _Write Everything Twice_. These _WET_ comments don’t help readers if the code is self-explanatory. Instead, follow the _DRY_ principle and _Don’t Repeat Yourself_.\n\nIn the example below, the lines of code that blink the eyes are inside the new `blink()` function. The program then calls the function three times, so the eyes blink three times. Notice that this time, the comments describe only the main parts of the code to help readers understand what that code should do.\n\n```\nimport time\n\nfrom hub import light_matrix\n\n# This function blinks the eyes.\ndef blink():\n    light_matrix.show_image(light_matrix.IMAGE_HAPPY)\n    time.sleep_ms(1000)\n    light_matrix.show_image(light_matrix.IMAGE_SMILE)\n    time.sleep_ms(200)\n    light_matrix.show_image(light_matrix.IMAGE_HAPPY)\n\n# Blink three times.\nblink()\nblink()\nblink()\n```\n\n#### Challenge\n\nCan you change the code to keep the eyes open longer each time they blink?"
}