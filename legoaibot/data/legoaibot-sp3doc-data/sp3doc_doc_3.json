{
  "doc_id": "doc_3",
  "doc_title": "Variables",
  "doc_text": "### Variables\n\nSometimes, you find yourself writing the same number again and again. For example, the motor commands in the previous chapter ran for the same number of degrees at the same velocity each time. In cases like this, using variables makes changing multiple commands easier.\n\nYou create a variable by writing the variable name, followed by a single `=` sign, and the initial value for the variable. If you want to change the value of an existing variable, you use the exact same format to _assign_ a new value to it.\n\nConnect motors to ports A and B and try the program below.\n\n```\nimport motor\nimport runloop\nfrom hub import port\n\nasync def main():\n    # Create a variable `velocity` with a value of 720.\n    velocity = 720\n\n    # Run two motors on ports A and B for 360 degrees.\n    # Use the value of the `velocity` variable for the motor velocity.\n    await motor.run_for_degrees(port.A,360, velocity)\n    await motor.run_for_degrees(port.B, 360, velocity)\n\nrunloop.run(main())\n```\n\nAs in the previous chapter, you’ll see both motors run 360 degrees (one rotation) at 720 degrees per second, one at a time. The example here creates a `velocity` variable and uses it in the `run_for_degrees()` function calls. Because we used a variable, it’s easy to change the motor velocity for all the motor commands. Try changing the value of the `velocity` variable and run the program again.\n\n#### Variable Scope\n\nIt’s important to understand that it matters _where_ a variable is created. When you create a variable inside a function, it’s only available to that function. This is called a _local_ variable. If you want to use a variable across different functions in your program, you must create the variable outside the functions, for example underneath your `import` statements. This is called a _global_ variable.\n\n```\nimport motor\nimport runloop\nfrom hub import port\n\n# Create a global variable `velocity` with a value of 720.\nvelocity = 720\n\nasync def main():\n    # Create a local variable `degrees` with a value of 360.\n    degrees = 360\n\n    # Run two motors on ports A and B.\n    # Use the value of the `degrees` variable for the number of degrees.\n    # Use the value of the `velocity` variable for the motor velocity.\n    await motor.run_for_degrees(port.A, degrees, velocity)\n    await motor.run_for_degrees(port.B, degrees, velocity)\n\nrunloop.run(main())\n```\n\nOnce again, you’ll see both motors run 360 degrees (one rotation) at 720 degrees per second, one at a time. This time the `velocity` variable has global _scope_ and a new `degrees` variable has local scope. You can use the global `velocity` variable both inside and outside of the `main()` function, but you can only use the local `degrees` variable inside the `main()` function where it is defined.\n\nIt can be tempting to define all your variables at the top of your program so they have global scope, because then you can conveniently use them in your whole program. However, this also means that the value of those variables can be changed from _anywhere_ in your program, with undesired side effects. Instead, _tightly scope_ your variables, so only the parts of your program that need to use and change them have access.\n\n#### Variables in Loops\n\nIn Python, the simplest way to repeat some code a number of times is to use a `for` loop with the built-in `range()` function. For example, to repeat something four times, you write `for i in range(4):` followed by the code you want to run four times. You can think of `range(4)` as the _tuple_ `(0, 1, 2, 3)`. Tuples and _lists_ such as `[ 1, 2, 3 ]` are _iterables_. The `for` loop takes an iterable and _loops over_ its values until it reaches the end.\n\nWhen a `for` loop _iterates_ over a tuple or list, it changes the value of a local variable on each iteration. So far, you’ve explicitly created variables and assigned them a value using the `=` sign. In a `for` loop, the name of the local variable is defined after the `for` keyword, in this case `i`. Each time the loop runs, the value of this local variable `i` changes. It will be `0` the first time the loop runs and `3` the last time it runs, corresponding to the values in `(0, 1, 2, 3)`.\n\nThe next example uses a `for` loop to change the global `velocity` variable four times to run the motor on port A with a different velocity each time. To enable changing the global variable `velocity` in the _local context_ of the `main()` function, you need to use the `global` keyword before `velocity` at the start of the function body.\n\n```\nimport motor\nimport runloop\nfrom hub import port\n\n# Create a global variable `velocity` with a value of 450.\nvelocity = 450\n\nasync def main():\n    # Use the `global` keyword to enable changing `velocity` here.\n    global velocity\n\n    # Create a local variable `degrees` with a value of 360.\n    degrees = 360\n\n    # The `for` loop creates a local variable `i` and repeats 4 times.\n    # The values of the `i` variable are 0, 1, 2, and 3.\n    for i in range(4):\n # Change the global variable `velocity` by adding `i`*90 each time.\n # The values of the `velocity` variable are 450, 540, 720, and 990.\n velocity = velocity + i*90\n await motor.run_for_degrees(port.A, degrees, velocity)\n\n    # The value of the `velocity` variable outside the `for` loop is 990.\n    await motor.run_for_degrees(port.B, degrees, velocity)\n\nrunloop.run(main())\n```\n\nRun the example code. You’ll see the motor on port A run 360 degrees four times, at four different velocities, faster each time. The final time, the motor on port B runs 360 degrees once at 990 degrees per second.\n\n#### Challenge\n\nCan you change the code so the motor on port A runs a different number of degrees each time?"
}