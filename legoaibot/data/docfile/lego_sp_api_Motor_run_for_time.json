{
  "Module_Name": "Motor",
  "Module_Description": "To use a Motor add the following import statement to your project:",
  "SubModule_Name": "Motor",
  "SubModule_Description": "To use a Motor add the following import statement to your project:",
  "Function_Name": "run_for_time",
  "Function": {
    "Function_Name": "run_for_time",
    "Function_Signature": "run_for_time(port: int, duration: int, velocity: int, *, stop: int = BRAKE, acceleration: int = 1000, deceleration: int = 1000) -> Awaitable",
    "Function_Description": "Run a Motor for a limited amount of time\nWhen awaited returns a status of the movement that corresponds to one of the following constants:\nmotor.READY\nmotor.RUNNING\nmotor.STALLED\nmotor.ERROR\nmotor.DISCONNECTED",
    "Function_Arguments": [
      {
        "Argument_Name": "port: int",
        "Argument_Description": "A port from the port submodule in the hub module"
      },
      {
        "Argument_Name": "duration: int",
        "Argument_Description": "The duration in milliseconds"
      },
      {
        "Argument_Name": "velocity: int",
        "Argument_Description": "The velocity in degrees/sec\nValue ranges depends on motor type.\nSmall motor (essential): -660 to 660\nMedium motor: -1110 to 1110\nLarge motor: -1050 to 1050"
      },
      {
        "Argument_Name": "stop: int",
        "Argument_Description": "The behavior of the Motor after it has stopped. Use the constants in the motor  module.\nPossible values are\nmotor.COAST to make the motor coast until a  stop\nmotor.BREAK to brake and continue to brake after  stop\nmotor.HOLD to tell the motor to hold it's  position\nmotor.CONTINUE to tell the motor to keep running at whatever velocity  it's running at until it gets another command\nmotor.SMART_COAST to make the  motor brake until stop and then coast and compensate for inaccuracies in the next  command\nmotor.SMART_BRAKE to make the motor brake and continue to brake after  stop and compensate for inaccuracies in the next command"
      },
      {
        "Argument_Name": "acceleration: int",
        "Argument_Description": "The acceleration (deg/sec²) (1 - 10000)"
      },
      {
        "Argument_Name": "deceleration: int",
        "Argument_Description": "The deceleration (deg/sec²) (1 - 10000)"
      }
    ],
    "Function_Snippet": [
      {
        "Python_Code": "from hub import port\nimport runloop\nimport motor\n\nasync def main():\n    # Run at 1000 velocity for 1 second \n    await motor.run_for_time(port.A, 1000, 1000)\n\n    # Run at 280 velocity for 1 second \n    await motor_pair.run_for_time(port.A, 1000, 280)\n\n    # Run at 280 velocity for 10 seconds with a slow deceleration \n    await motor_pair.run_for_time(port.A, 10000, 280, deceleration=10)\n\nrunloop.run(main())"
      }
    ]
  }
}