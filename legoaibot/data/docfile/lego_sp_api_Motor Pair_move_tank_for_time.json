{
  "Module_Name": "Motor Pair",
  "Module_Description": "The motor_pair module is used to run motors in a synchronized fashion. This mode is optimal for creating drivebases where you'd want a pair of motors to start and stop at the same time.",
  "SubModule_Name": "Motor Pair",
  "SubModule_Description": "The motor_pair module is used to run motors in a synchronized fashion. This mode is optimal for creating drivebases where you'd want a pair of motors to start and stop at the same time.",
  "Function_Name": "move_tank_for_time",
  "Function": {
    "Function_Name": "move_tank_for_time",
    "Function_Signature": "move_tank_for_time(pair: int, left_velocity: int, right_velocity: int, duration: int, *, stop: int = motor.BRAKE, acceleration: int = 1000, deceleration: int = 1000) -> Awaitable",
    "Function_Description": "Perform a tank move on a Motor Pair at a constant speed for a specific amount of time.\nWhen awaited returns a status of the movement that corresponds to one of the following constants from the motor module:\nmotor.READY\nmotor.RUNNING\nmotor.STALLED\nmotor.CANCELED\nmotor.ERROR\nmotor.DISCONNECTED",
    "Function_Arguments": [
      {
        "Argument_Name": "pair: int",
        "Argument_Description": "The pair slot of the Motor Pair."
      },
      {
        "Argument_Name": "duration: int",
        "Argument_Description": "The duration in milliseconds"
      },
      {
        "Argument_Name": "left_velocity: int",
        "Argument_Description": "The velocity (deg/sec) of the left motor."
      },
      {
        "Argument_Name": "right_velocity: int",
        "Argument_Description": "The velocity (deg/sec) of the right motor."
      },
      {
        "Argument_Name": "stop: int",
        "Argument_Description": "The behavior of the Motor after it has stopped. Use the constants in the motor  module.\nPossible values are\nmotor.COAST to make the motor coast until a  stop\nmotor.BREAK to brake and continue to brake after  stop\nmotor.HOLD to tell the motor to hold it's  position\nmotor.CONTINUE to tell the motor to keep running at whatever velocity  it's running at until it gets another command\nmotor.SMART_COAST to make the  motor brake until stop and then coast and compensate for inaccuracies in the next  command\nmotor.SMART_BRAKE to make the motor brake and continue to brake after  stop and compensate for inaccuracies in the next command"
      },
      {
        "Argument_Name": "acceleration: int",
        "Argument_Description": "The acceleration (deg/sec²) (1 - 10000)"
      },
      {
        "Argument_Name": "deceleration: int",
        "Argument_Description": "The deceleration (deg/sec²) (1 - 10000)"
      }
    ],
    "Function_Snippet": [
      {
        "Python_Code": "from hub import port\nimport runloop\nimport motor_pair\n\nasync def main():\n    # Pair motors on port A and B \n    motor_pair.pair(motor_pair.PAIR_1, port.A, port.B)\n\n    # Move straight at default velocity for 1 second \n    await motor_pair.move_tank_for_time(motor_pair.PAIR_1, 1000, 1000, 1000)\n\n    # Turn right for 3 seconds \n    await motor_pair.move_tank_for_time(motor_pair.PAIR_1, 0, 1000, 3000)\n\n    # Perform tank turn for 2 seconds \n    await motor_pair.move_tank_for_time(motor_pair.PAIR_1, 1000, -1000, 2000)\n\nrunloop.run(main())"
      }
    ]
  }
}